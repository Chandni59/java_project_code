import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;


public class VetClinicSystem {
    private JFrame frame;
    private JTable table;
    private DefaultTableModel tableModel;
    private Connection conn;
    private JTextField txtPetID;


    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new VetClinicSystem().initialize());
    }


 public VetClinicSystem() 
{
        try {
conn= DriverManager.getConnection("jdbc:oracle:thin:@//AMIRTHAVARSHINI:1521/XE", "project", "amir");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database connection error.");
        }
    }


    public void initialize() {
        frame = new JFrame("Pet Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1000, 600);
   
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(new Color(173, 216, 230));
        frame.getContentPane().add(mainPanel);
   
   

// Header panel with title and Pet ID input field
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(173, 216, 230));
   
        // Centered title label
        JLabel header = new JLabel("Pet Management System", JLabel.CENTER);
        header.setFont(new Font("Arial", Font.BOLD, 24));
        header.setForeground(new Color(0, 0, 139));
        headerPanel.add(header, BorderLayout.CENTER);
   
        // Panel for Pet ID label and text field on the right
        JPanel petIDPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        petIDPanel.setBackground(new Color(173, 216, 230));
        JLabel lblPetID = new JLabel("Pet ID:");
        lblPetID.setFont(new Font("Arial", Font.PLAIN, 16));
        txtPetID = new JTextField(10);
        petIDPanel.add(lblPetID);
        petIDPanel.add(txtPetID);
   
        headerPanel.add(petIDPanel, BorderLayout.EAST);
        mainPanel.add(headerPanel, BorderLayout.NORTH);
   
// Table and table header styles
        tableModel = new DefaultTableModel(new Object[]{"Pet ID", "Name", "Breed", "Age", "Owner Name", "Owner Contact"}, 0);
        table = new JTable(tableModel);
        table.setBackground(new Color(240, 248, 255));
        table.getTableHeader().setBackground(new Color(100, 149, 237));
        table.getTableHeader().setForeground(Color.WHITE);
        JScrollPane scrollPane = new JScrollPane(table);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
   
        // Bottom button panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.setBackground(new Color(70, 130, 180));
        addButtons(buttonPanel);
   
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);
   
        frame.setVisible(true);
    }
 

private void addButtons(JPanel buttonPanel) {
        String[] buttonNames = {"Add Pet", "Add Appointment", "Search Pet", "View Appointments", "Add Medical Record", "View Medical Records", "Generate Bill", "Update Pet", "Delete Pet"};
        ActionListener[] buttonActions = {
            e -> addPet(), e -> addAppointment(), e -> searchPetByName(),
         e -> viewAppointments(), e -> addMedicalRecord(), e -> viewMedicalRecords(), e -> generateBill(),
            e -> updatePet(), e -> deletePet()
        };


        Color buttonColor = new Color(0, 191, 255);


        for (int i = 0; i < buttonNames.length; i++) {
            JButton button = new JButton(buttonNames[i]);
            button.setFont(new Font("Arial", Font.BOLD, 14));
            button.setBackground(buttonColor);
            button.setForeground(Color.WHITE);
            button.addActionListener(buttonActions[i]);
            buttonPanel.add(button);
        }
    }



private int getPetIDInput() {
        try {
            return Integer.parseInt(txtPetID.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "Please enter a valid Pet ID.");
            return -1;
        }
    }
 
    private void addPet() {
        int petID = getPetIDInput();
        if (petID == -1) return;
 
        String name = JOptionPane.showInputDialog(frame, "Enter Pet Name:");
        String breed = JOptionPane.showInputDialog(frame, "Enter Pet Breed:");
        int age = Integer.parseInt(JOptionPane.showInputDialog(frame, "Enter Pet Age:"));
        String ownerName = JOptionPane.showInputDialog(frame, "Enter Owner Name:");
        String ownerContact = JOptionPane.showInputDialog(frame, "Enter Owner Contact:");
 
        


try {
            String query = "INSERT INTO pets (pet_id, name, breed, age, owner_name, owner_contact) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, petID);
            stmt.setString(2, name);
            stmt.setString(3, breed);
            stmt.setInt(4, age);
            stmt.setString(5, ownerName);
            stmt.setString(6, ownerContact);
            stmt.executeUpdate();
 
            JOptionPane.showMessageDialog(frame, "Pet Added Successfully!");
            refreshPetTable();
 
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while adding pet: " + e.getMessage());
        }
    }
 

 private void addAppointment() {
        int petID = getPetIDInput();
        if (petID == -1) return;
 
        String veterinarian = JOptionPane.showInputDialog(frame, "Enter Veterinarian:");
        String dateInput = JOptionPane.showInputDialog(frame,"Enter Appointment Date (YYYY-MM-DD):");
        java.sql.Date appointmentDate = java.sql.Date.valueOf(dateInput);
        String status = JOptionPane.showInputDialog(frame, "Enter Status:");
 
        try {
            String query = "INSERT INTO appointments (appointment_id, pet_id, veterinarian,appointment_date, status) VALUES (appointment_seq.NEXTVAL, ?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, petID);
            stmt.setString(2, veterinarian);
            stmt.setDate(3, appointmentDate);
            stmt.setString(4, status);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(frame, "Appointment Added Successfully!");
 
   

// Automatically generate a bill for the appointment
            autoGenerateBill(petID, 50.0, appointmentDate);  // Fixed charge of $50
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while adding appointment: " +
e.getMessage());
        }
    }
     
    private void autoGenerateBill(int petID, double amount, java.sql.Date date) {
        try {
            String query = "INSERT INTO bills (bill_id, pet_id, bill_amount, bill_date) VALUES (bill_seq.NEXTVAL, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, petID);
            stmt.setDouble(2, amount);
            stmt.setDate(3, date);
            stmt.executeUpdate();
 
   
//JOptionPane.showMessageDialog(frame,"BillGenerated Automatically for $" + amount);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while generating bill: " + e.getMessage());
        }
    }
     
    private void searchPetByName() {
        String name = JOptionPane.showInputDialog(frame, "Enter Pet Name:");
        try {
            String query = "SELECT * FROM pets WHERE name LIKE ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, "%" + name + "%");
            ResultSet rs = stmt.executeQuery();
 
           




 tableModel.setRowCount(0);
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("pet_id"),
                        rs.getString("name"),
                        rs.getString("breed"),
                        rs.getInt("age"),
                        rs.getString("owner_name"),
                        rs.getString("owner_contact")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while searching pet: " + e.getMessage());
        }
    }




private void viewAppointments() {
        int petID = getPetIDInput();
        if (petID == -1) return;
 
        try {
            String query = "SELECT * FROM appointments WHERE pet_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, petID);
            ResultSet rs = stmt.executeQuery();
 
            tableModel.setRowCount(0);
            tableModel.setColumnIdentifiers(new Object[]{"Appointment ID", "Pet ID", "Veterinarian",
"Date", "Status"});
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("appointment_id"),
                        rs.getInt("pet_id"),
                        rs.getString("veterinarian"),
                        rs.getDate("appointment_date"),
                        rs.getString("status")
                });
            }
        } 




    catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while retrieving appointments: " +
e.getMessage());
        }
    }
private void addMedicalRecord() {
        int petID = getPetIDInput();
        if (petID == -1) return;
 
        String diagnosis = JOptionPane.showInputDialog(frame, "Enter Diagnosis:");
        String treatment = JOptionPane.showInputDialog(frame, "Enter Treatment:");
        String vaccination = JOptionPane.showInputDialog(frame, "Enter Vaccination:");
        String dateInput = JOptionPane.showInputDialog(frame, "Enter Record Date (YYYY-MM-DD):");
        java.sql.Date recordDate = java.sql.Date.valueOf(dateInput);
 
   
 try {
            String query = "INSERT INTO medical_records (record_id, pet_id, diagnosis, treatment,vaccination, record_date) VALUES (medical_record_seq.NEXTVAL, ?, ?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, petID);
            stmt.setString(2, diagnosis);
            stmt.setString(3, treatment);
            stmt.setString(4, vaccination);
            stmt.setDate(5, recordDate);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(frame, "Medical Record Added Successfully!");
 
            // Automatically generate a bill for the treatment
            autoGenerateBill(petID, 100.0, recordDate);  // Fixed charge of $100
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while adding medical record: " + e.getMessage());
        }
    }
 
  
private void viewMedicalRecords() {
        int petID = getPetIDInput();
        if (petID == -1) return;
 
        try {
            String query = "SELECT * FROM medical_records WHERE pet_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, petID);
            ResultSet rs = stmt.executeQuery();
 
            tableModel.setRowCount(0);
            tableModel.setColumnIdentifiers(new Object[]{"Record ID", "Pet ID", "Diagnosis",
"Treatment", "Vaccination", "Date"});
            



while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("record_id"),
                        rs.getInt("pet_id"),
                        rs.getString("diagnosis"),
                        rs.getString("treatment"),
                        rs.getString("vaccination"),
                        rs.getDate("record_date")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while retrieving medical records: " +
e.getMessage());
        }
    }
 
    private void generateBill() {
        int petID = getPetIDInput();
        if (petID == -1) return;
 

try {
            String query = "SELECT SUM(bill_amount) FROM bills WHERE pet_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, petID);
            ResultSet rs = stmt.executeQuery();
 
            if (rs.next()) {
                double totalAmount = rs.getDouble(1);
                JOptionPane.showMessageDialog(frame, "Total Bill: " + totalAmount);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while generating bill: " + e.getMessage());
        }
    }
   
    private void deletePet() {
        int petID = getPetIDInput();
        if (petID == -1) return;
   
        

try {
            // Begin transaction
            conn.setAutoCommit(false);
   
            // Step 1: Delete related records in child tables (adjust table names as necessary)
            String deleteMedicalRecordsQuery = "DELETE FROM medical_records WHERE pet_id = ?";
            PreparedStatement stmt1 = conn.prepareStatement(deleteMedicalRecordsQuery);
            stmt1.setInt(1, petID);
            stmt1.executeUpdate();
   
            String deleteAppointmentsQuery = "DELETE FROM appointments WHERE pet_id = ?";
           PreparedStatement stmt2 = conn.prepareStatement(deleteAppointmentsQuery);
            stmt2.setInt(1, petID);
            stmt2.executeUpdate();
   
    

String deleteBillsQuery = "DELETE FROM bills WHERE pet_id = ?";
            PreparedStatement stmt3 = conn.prepareStatement(deleteBillsQuery);
            stmt3.setInt(1, petID);
            stmt3.executeUpdate();
   
            // Step 2: Delete the pet record from the pets table
            String deletePetQuery = "DELETE FROM pets WHERE pet_id = ?";
            PreparedStatement stmt4 = conn.prepareStatement(deletePetQuery);
            stmt4.setInt(1, petID);
            int rowsAffected = stmt4.executeUpdate();
   
            // Commit transaction
            conn.commit();
   
     
if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame, "Pet Deleted Successfully!");
                refreshPetTable();
            } else {
                JOptionPane.showMessageDialog(frame, "Pet ID not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                // Rollback transaction in case of error
                conn.rollback();
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
            JOptionPane.showMessageDialog(frame, "Error while deleting pet: " + e.getMessage());
        }

 finally {
            try {
                // Restore default auto-commit behavior
                conn.setAutoCommit(true);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }    
   
    private void refreshPetTable() {
        try {
            String query = "SELECT * FROM pets";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
 
            tableModel.setRowCount(0);
  

while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("pet_id"),
                        rs.getString("name"),
                        rs.getString("breed"),
                        rs.getInt("age"),
                        rs.getString("owner_name"),
                        rs.getString("owner_contact")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while refreshing pet table: " +
e.getMessage());
        }
    }


    private void updatePet() {
        int petID = getPetIDInput();
        if (petID == -1) return;

String name = JOptionPane.showInputDialog(frame, "Enter New Pet Name:");
        String breed = JOptionPane.showInputDialog(frame, "Enter New Pet Breed:");
        int age = Integer.parseInt(JOptionPane.showInputDialog(frame, "Enter New Pet Age:"));
        String ownerName = JOptionPane.showInputDialog(frame, "Enter New Owner Name:");
        String ownerContact = JOptionPane.showInputDialog(frame, "Enter New Owner Contact:");


        try {
            String query = "UPDATE pets SET name = ?, breed = ?, age = ?, owner_name = ?, owner_contact = ? WHERE pet_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, name);
            stmt.setString(2, breed);
            stmt.setInt(3, age);
            stmt.setString(4, ownerName);
            stmt.setString(5, ownerContact);
            stmt.setInt(6, petID);


  

    int rowsAffected = stmt.executeUpdate();


            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame, "Pet Updated Successfully!");
                refreshPetTable();
            } else {
                JOptionPane.showMessageDialog(frame, "Pet ID not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error while updating pet: " + e.getMessage());
        }
    }
}
